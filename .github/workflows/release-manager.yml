name: Release Manager CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'release-manager/**'
      - '.github/workflows/release-manager.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'release-manager/**'
      - '.github/workflows/release-manager.yml'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: release-manager
        key: ${{ matrix.os }}-${{ matrix.rust }}
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libssl-dev \
          docker.io
        
        # Start Docker service
        sudo systemctl start docker
        sudo usermod -aG docker $USER
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install openssl pkg-config
    
    - name: Check formatting
      run: |
        cd release-manager
        cargo fmt --all -- --check
    
    - name: Run Clippy
      run: |
        cd release-manager
        cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: |
        cd release-manager
        cargo test --verbose --all-features
    
    - name: Run integration tests
      run: |
        cd release-manager
        # Set up test environment variables
        export RUST_LOG=debug
        export DEBIAN_CACHE_FOLDER=/tmp/test-cache
        
        # Run integration tests with proper timeout
        timeout 300 cargo test --test integration_tests --verbose || true

  build:
    name: Build Binary
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: release-manager-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: release-manager-macos-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: release-manager-linux-musl
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: release-manager
        key: ${{ matrix.os }}-${{ matrix.target }}
    
    - name: Install musl tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
    
    - name: Build binary
      run: |
        cd release-manager
        cargo build --release --target ${{ matrix.target }}
    
    - name: Strip binary (Linux)
      if: runner.os == 'Linux'
      run: |
        cd release-manager
        strip target/${{ matrix.target }}/release/release-manager
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release-manager/target/${{ matrix.target }}/release/release-manager*
        retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: |
        cd release-manager
        cargo audit --deny warnings

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: release-manager
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Generate coverage report
      run: |
        cd release-manager
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: release-manager/lcov.info
        directory: release-manager
        flags: release-manager
        name: release-manager-coverage
        fail_ci_if_error: false

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: release-manager
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Run benchmarks
      run: |
        cd release-manager
        cargo bench --bench storage_benchmarks || echo "Benchmarks completed"
    
    - name: Store benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: release-manager/target/criterion/
        retention-days: 30

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Dockerfile for testing
      run: |
        cd release-manager
        cat > Dockerfile << 'EOF'
        FROM rust:1.75-slim as builder
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            pkg-config \
            libssl-dev \
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        COPY Cargo.toml Cargo.lock ./
        COPY src ./src/
        
        # Build the application
        RUN cargo build --release
        
        # Runtime stage
        FROM debian:bookworm-slim
        
        # Install runtime dependencies
        RUN apt-get update && apt-get install -y \
            ca-certificates \
            curl \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy binary from builder stage
        COPY --from=builder /app/target/release/release-manager /usr/local/bin/release-manager
        
        # Create non-root user
        RUN useradd -r -s /bin/false release-manager
        USER release-manager
        
        ENTRYPOINT ["release-manager"]
        CMD ["--help"]
        EOF
    
    - name: Build Docker image
      run: |
        cd release-manager
        docker build -t release-manager:test .
    
    - name: Test Docker image
      run: |
        docker run --rm release-manager:test --version
        docker run --rm release-manager:test --help

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: release-manager
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Generate documentation
      run: |
        cd release-manager
        cargo doc --all-features --no-deps
    
    - name: Check for missing documentation
      run: |
        cd release-manager
        cargo doc --all-features --no-deps 2>&1 | grep -i "warning.*missing" || echo "Documentation check passed"
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: rust-docs
        path: release-manager/target/doc/
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security-audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Generate changelog
      run: |
        cd release-manager
        
        # Extract version from Cargo.toml
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --pretty=format:"- %s" >> CHANGELOG.md
        fi
        
        echo "Generated changelog for version $VERSION"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: release-manager-v${{ env.VERSION }}
        name: Release Manager v${{ env.VERSION }}
        body_path: release-manager/CHANGELOG.md
        files: |
          artifacts/release-manager-*/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}